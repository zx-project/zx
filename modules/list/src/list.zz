using iterator::{
  init as init_iterator,
  Direction,
  Iterator,
  HEAD,
  TAIL,
}

using node::{
  alloc as alloc_node,
  init as init_node,
  deref,
  Node,
}

using zxutils as utils

/**
 * A free function used to free the value a node points to. This is a
 * NOP function by default.
 */
export fntype FreeNodeValueFunction(void mut *ptr) -> void;

/**
 * A compare function used to compare pointers when find a node in a list.
 */
export fntype CompareNodeValueFunction(void *a, void *b) -> bool;

/**
 * A function used to allocate a `Node *` pointer.
 */
export fntype AllocateNodeFunction() -> Node mut *;

/**
 * A function used to free an allocated `Node *` pointer.
 */
export fntype FreeNodeFunction(Node mut *node) -> void;

/**
 * A prototype of functions used on list nodes.
 */
struct ListNodePrototype {
  FreeNodeFunction free;
  AllocateNodeFunction alloc;
}

/**
 * A prototype of functions used on list node values.
 */
struct ListNodeValuePrototype {
  FreeNodeValueFunction free;
  CompareNodeValueFunction compare;
}

/**
 * A prototype of functions for list nodes and their values.
 */
export struct ListPrototype {
  ListNodeValuePrototype values;
  ListNodePrototype nodes;
}

/**
 * A structure prototype of list defaults, such as the iterator direction.
 */
export struct ListDefaults {
  Direction iterator_direction;
}

/**
 * A static structure of list configuration defaults.
 */
static ListDefaults shared_defaults = ListDefaults {
  iterator_direction: HEAD
};

/**
 * A doubly linked list suitable for stack allocation.
 */
export struct List {
  Node mut *head;
  Node mut *tail;
  usize length;

  ListPrototype prototype;
  ListDefaults defaults;
}

/**
 * Creates (allocate) a list node and attaches self to list node.
 * @private
 */
fn create_list_node(List mut *self, void *value) -> Node mut *
  model safe(value)
  model safe(return)
  model true == return->alloc
  model safe(self->prototype.nodes.alloc)
{
  static_attest(safe(self->prototype.nodes.alloc));

  let mut node = self->prototype.nodes.alloc();

  static_attest(safe(value));
  static_attest(safe(node));

  init_node(node, value);
  node->list = self;
  node->alloc = true;
  return node;
}

/**
 * The default free function for every list node.
 * @private
 */
fn default_node_free(Node mut *node)
  model safe(node)
{
  utils::memory::free(node);
}

/**
 * The default free function for every list node.
 * @private
 */
fn default_node_allocate() -> Node mut *
  model safe(return)
  model true == return->alloc
{
  let node = alloc_node();
  static_attest(safe(node));
  return node;
}

/**
 * The default NOP free function for every list node value.
 * @private
 */
fn default_node_value_free(void mut * mut ptr) {
  (void) ptr;
}

/**
 * The default node value comparator function.
 * @private
 */
fn default_node_value_compare(void *left, void *right) -> bool
  model safe(left)
  model safe(right)
{
  static_attest(safe(left));
  static_attest(safe(right));
  return left == right;
}

/**
 * `List` constructor. Initializes a `List` pointer.
 * @constructor
 * @example
 *   new list = zxlist::init();
 */
export fn init(List new mut *self) {
  utils::memory::copy(&self->defaults, &shared_defaults, sizeof(ListDefaults));

  // set default prototype functions
  self->set_prototype(ListPrototype {
    nodes: ListNodePrototype {
      free: default_node_free,
      alloc: default_node_allocate,
    },

    values: ListNodeValuePrototype {
      free: default_node_value_free,
      compare: default_node_value_compare,
    }
  });
}

/**
 * Extend the prototype of the `List` instance.
 * @example
 *   new list = zxlist::init();
 *   list.set_prototype(ListPrototype {
 *     nodes: ListNodePrototype {
 *       free: node_free_function,
 *       alloc: node_allocate_function,
 *     },
 *
 *     values: ListNodeValuePrototype {
 *       free: node_value_free_function,
 *       compare: node_value_compare_function,
 *     }
 *   })
 */
export fn set_prototype(List new mut *self, ListPrototype prototype) {
  if 0 != prototype.nodes.free {
    self->prototype.nodes.free = prototype.nodes.free;
  }

  if 0 != prototype.nodes.alloc {
    self->prototype.nodes.alloc = prototype.nodes.alloc;
  }

  if 0 != prototype.values.free {
    self->prototype.values.free = prototype.values.free;
  }

  if 0 != prototype.values.compare {
    self->prototype.values.compare = prototype.values.compare;
  }
}

/**
 * Destroys list, active iterators, and any allocated nodes
 * still attached to the list.
 * @example
 *   new list = zxlist::init();
 *   list.destroy();
 */
export fn destroy(List mut *self) {
  let mut it = self->iterator();

  while !it.ended {
    let node = it.next();
    node->destroy();
  }

  utils::memory::zero(self, sizeof(List));
}

/**
 * Creates and returns a stack allocated iterator for a list instance
 * in the default iterator direction.
 * @example
 *   new list = zxlist::init();
 *   let it = list.iterator();
 *
 *   while !it.ended {
 *     let node = it.next();
 *   }
 *
 *   it.destroy();
 */
export fn iterator(List mut *self) -> Iterator {
  let defaults = self->defaults;
  return self->iterator_with_direction(defaults.iterator_direction);
}

/**
 * Creates and returns a stack allocated iterator for a list instance
 * in the "head" direction.
 * @example
 *   new list = zxlist::init();
 *   let it = list.iterator_head();
 *
 *   while !it.ended {
 *     let node = it.next();
 *   }
 *
 *   it.destroy();
 */
export inline fn iterator_head(List mut *self) -> Iterator {
  return self->iterator_with_direction(HEAD);
}

/**
 * Creates and returns a stack allocated iterator for a list instance
 * in the "tail" direction.
 * @example
 *   new list = zxlist::init();
 *   let it = list.iterator_tail();
 *
 *   while !it.ended {
 *     let node = it.next();
 *   }
 *
 *   it.destroy();
 */
export inline fn iterator_tail(List mut *self) -> Iterator {
  return self->iterator_with_direction(TAIL);
}

/**
 * Creates and returns a stack allocated iterator for a list instance
 * in a given direction.
 * @example
 *   new list = zxlist::init();
 *   let it = list.iterator_with_direction(zxlist::HEAD);
 *
 *   while !it.ended {
 *     let node = it.next();
 *   }
 *
 *   it.destroy();
 */
export fn iterator_with_direction(List mut *self, Direction direction) -> Iterator {
  new it = init_iterator(self, direction);
  return it;
}

/**
 * Pushes a value to the right of the list updating the tail returning the
 * newly created list node.
 * @example
 *   new list = zxlist::init();
 *   list.rpush("hello");
 *   list.rpush("world");
 */
export fn rpush(List mut *self, void *value) -> Node mut * {
  let mut node = create_list_node(self, value);
  return rpush_node(self, node);
}

/**
 * Pushes a node with a value to the right of the list updating the tail
 * returning the newly created list node.
 * @example
 *   new list = zxlist::init();
 *   let node = zxlist::node::init("hello")
 *   list.rpush_node(&node);
 */
export fn rpush_node(List mut *self, Node mut *node) -> Node mut * {
  let length = self->length;

  static_attest(safe(node));

  if length > 0 && 0 != self->tail {
    static_attest(safe(self->tail));
    node->prev = self->tail;
    node->next = 0;
    self->tail->next = node;
    self->tail = node;
  } else {
    node->prev = 0;
    node->next = 0;
    self->head = node;
    self->tail = node;
  }

  self->length = length + 1;
  return node;
}

/**
 * Pushes a value to the left of the list updating the head returning the
 * newly created list node.
 * @example
 *   new list = zxlist::init();
 *   list.lpush("world");
 *   list.lpush("hello");
 */
export fn lpush(List mut *self, void *value) -> Node mut * {
  let mut node = create_list_node(self, value);

  return lpush_node(self, node);
}

/**
 * Pushes a value to the left of the list updating the head returning the
 * newly created list node.
 * @example
 *   new list = zxlist::init();
 *   let node = zxlist::node::init("hello");
 *   list.lpush_node(node);
 */
export fn lpush_node(List mut *self, Node mut *node) -> Node mut * {
  let length = self->length;

  static_attest(safe(node));

  if length > 0 && 0 != self->head {
    static_attest(safe(self->head));
    node->next = self->head;
    node->prev = 0;
    self->head->prev = node;
    self->head = node;
  } else {
    node->prev = 0;
    node->next = 0;
    self->head = node;
    self->tail = node;
  }

  self->length = length + 1;
  return node;
}

/**
 * Pops and returns a node with its value from the right of the list updating
 * the tail. The returned node's memory must be managed by the caller as the
 * list will not free any allocated resources for the returned node as it is
 * dereferenced from the list.
 * @example
 *   new list = zxlist::init();
 *   list.rpush("hello");
 *   list.rpush("world");
 *   let node = list.rpop(); // node with value "world"
 */
export fn rpop(List mut *self) -> Node mut * {
  let length = self->length;
  let node = self->tail;

  if length - 1 > 0 && 0 != node {
    static_attest(safe(node));
    static_attest(safe(node->prev));

    self->length = length - 1;
    self->tail = node->prev;
    self->tail->next = 0;
  } else {
    self->length = 0;
    self->tail = 0;
    self->head = 0;
  }

  return deref(node);
}

/**
 * Pops and returns a node with its value from the left of the list updating
 * the head. The returned node's memory must be managed by the caller as the
 * list will not free any allocated resources for the returned node as it is
 * dereferenced from the list.
 * @example
 *   new list = zxlist::init();
 *   list.rpush("hello");
 *   list.rpush("world");
 *   let node = list.lpop(); // node with value "hello"
 */
export fn lpop(List mut *self) -> Node mut * {
  let length = self->length;
  let node = self->head;

  if length - 1 > 0 && 0 != node {
    static_attest(safe(node));
    static_attest(safe(node->next));

    self->length = length - 1;
    self->head = node->next;
    self->head->prev = 0;
  } else {
    self->length = 0;
    self->tail = 0;
    self->head = 0;
  }

  return deref(node);
}

/**
 * Finds and returns a list node that points to a value that matches the given
 * value pointer. A user supplied comparator function can be used by setting
 * `list.prototype.values.compare` to a `CompareNodeValueFunction` type, otherwise
 * simple pointer comparison is used by default.
 * @example
 *   new list = zxlist::init();
 *   list.rpush("hello");
 *   list.rpush("world");
 *   let node = list.find("world"); // node with value "world"
 */
export fn find(List mut *self, void *value) -> Node mut *
  model safe(self->prototype.values.compare)
{
  static_attest(safe(self->prototype.values.compare));

  let mut tail = self->iterator_tail();
  let mut head = self->iterator();
  let compare = self->prototype.values.compare;

  while !head.ended && !tail.ended {
    let left = head.next();
    let right = tail.next();

    if 0 != left {
      static_attest(safe(left));
      if compare(value, left->value) {
        head.destroy();
        tail.destroy();
        return left;
      }
    }

    if 0 != right {
      static_attest(safe(right));
      if compare(value, right->value) {
        head.destroy();
        tail.destroy();
        return right;
      }
    }
  }

  head.destroy();
  tail.destroy();

  return 0;
}

/**
 * Finds and returns the list node at a given index.
 * @example
 *   new list = zxlist::init();
 *   list.rpush("hello");
 *   list.rpush("world");
 *   let node = list.at(1); // node with value "world"
 */
export fn at(List mut *self, int index) -> Node mut * {
  if (usize) index >= self->length {
    return 0;
  }

  let mut i = index;
  let mut it = self->iterator();
  let mut node = it.next();

  if index < 0 {
    it.direction = (Direction) TAIL;
    it.node = self->tail;
    i = ~index;
  }

  while !it.ended && i-- > 0 {
    node = it.next();
  }

  return node;
}

/**
 * Finds a list node that points to a given value and removes it from the
 * list, freeing any allocated resources. This function will call
 * `list.prototype.nodes.free()`.
 * @example
 *   new list = zxlist::init();
 *   list.rpush("hello");
 *   list.rpush("world");
 *   list.remove("world");
 *   assert(1 == list.length);
 */
export fn remove(List mut *self, void *value)
  where safe(value)
{
  let mut node = self->find(value);
  if 0 != node {
    static_attest(safe(node));
    remove_node(self, node);
  }
}

/**
 * Removes a node from the list, destroying it, updating links and list
 * length.
 * @example
 *   new list = zxlist::init();
 *   let node = list.push("hello");
 *   list.remove_node(node);
 */
export fn remove_node(List mut *self, Node mut *node) {
  let length = self->length;

  if 0 != node {
    static_attest(safe(node));
    node->destroy();
    self->length = length - 1;
  }
}

/**
 * Returns a boolean indicating if a list contains a value.
 * @example
 *   new list = zxlist::init();
 *   list.push("hello");
 *   if list.contains("hello") {
 *     list.push("world");
 *   }
 */
export fn contains(List mut *self, void *value) -> bool
  model safe(self)
  model safe(value)
{
  let node = self->find(value);

  if 0 != node {
    return true;
  } else {
    return false;
  }
}

/**
 * Returns a boolean indicating if a list contains a list node.
 * @example
 *   new list = zxlist::init();
 *   let hello = list.push("hello");
 *   if list.contains_node(hello) {
 *     let world = list.create_node("world");
 *     list.push_node(world);
 *   }
 */
export fn contains_node(List mut *self, Node *node) -> bool
  model safe(self)
  model safe(node)
{
  let mut it = self->iterator();

  while !it.ended {
    let suspect = it.next();
    if node == suspect {
      it.destroy();
      return true;
    }
  }

  return false;
}

/**
 * An alias to `list.rpop()`.
 * @example
 *   new list = zxlist::init();
 *   list.rpush("hello");
 *   list.rpush("world");
 *   let node = list.pop(); // node with value "world"
 */
export fn pop(List mut *self) -> Node mut * {
  return self->rpop();
}

/**
 * An alias to `list.rpush()`.
 * @example
 *   new list = zxlist::init();
 *   list.push("hello");
 *   list.push("world");
 */
export fn push(List mut *self, void *value) -> Node mut * {
  return self->rpush(value);
}

/**
 * An alias to `list.rpush_node()`.
 * @example
 *   new list = zxlist::init();
 *   let node = zxlist::node::init("hello")
 *   list.push_node(&node);
 */
export fn push_node(List mut *self, Node mut *node) -> Node mut * {
  return self->rpush_node(node);
}

/**
 * An alias to `list.lpop()`.
 * @example
 *   new list = zxlist::init();
 *   list.push("hello");
 *   list.push("world");
 *   let node = list.shift(); // node with value "hello"
 */
export fn shift(List mut *self) -> Node mut * {
  return self->lpop();
}

/**
 * An alias to `list.lpush()`.
 * @example
 *   new list = zxlist::init();
 *   list.unshift("world");
 *   list.unshift("hello");
 */
export fn unshift(List mut *self, void *value) -> Node mut * {
  return self->lpush(value);
}

/**
 * An alias to `list.lpush_node()`.
 * @example
 *   new list = zxlist::init();
 *   let node = zxlist::node::init("hello");
 *   list.unshift_node(node);
 */
export fn unshift_node(List mut *self, Node mut *node) -> Node mut * {
  return self->lpush_node(node);
}

/**
 * Creates a unlinked node from a given value attached to list.
 * @example
 *   new list = zxlist::init();
 *   let node = list.create_node("hello");
 *   node->destroy();
 */
export fn create_node(List mut *self, void *value) -> Node mut * {
  return create_list_node(self, value);
}
