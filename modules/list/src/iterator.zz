using list::{ List }
using node::{ Node }

using zxutils as utils

/**
 * The list iterator iteration direction.
 */
export enum Direction {
  Head = 0,
  Tail = 1
}

/**
 * The `Direction::Head` enum value exported as a
 * constant for better ergonomics.
 */
export const int HEAD = Direction::Head;

/**
 * The `Direction::Tail` enum value exported as a
 * constant for better ergonomics.
 */
export const int TAIL = Direction::Tail;

/**
 * An iterator context for a list.
 */
export struct Iterator {
  Direction direction;
  bool ended;
  List mut *list;
  Node mut *node;
}

/**
 * `Iterator` stack constructor with direction from a list.
 */
export fn make(Iterator new mut *self, List mut *list, Direction direction)
  model safe(self)
  where safe(list)
{
  self->list = list;
  self->ended = false;
  self->direction = direction;

  switch direction {
    Direction::Head => { self->node = list->head; }
    Direction::Tail => { self->node = list->tail; }
  }

  if 0 == self->node {
    self->ended = true;
  }
}

/**
 * Returns a pointer to the next node in the list.
 * @example
 *   new list = zxlist::make();
 *   let it = list.iterator();
 *   while !it.ended {
 *     let node = it.next();
 *   }
 */
export fn next(Iterator mut *self) -> Node *
  model safe(self)
  model safe(return)
  model safe(return->value)

  where false == self->ended
{
  let node = self->node;

  if 0 != node {
    static_attest(safe(node));
    switch self->direction {
      Direction::Head => { self->node = node->next; }
      Direction::Tail => { self->node = node->prev; }
    }
  }

  if 0 == self->node {
    self->ended = true;
  }

  static_attest(safe(node));
  static_attest(safe(node->value));

  return node;
}

/**
 * Marks the iterator as "ended".
 * @example
 *   new list = zxlist::make();
 *   let mut it = list.iterator();
 *
 *   while !it.ended {
 *     if list.contains(key) {
 *       it.end();
 *     } else {
 *       it.next();
 *    }
 *   }
 *
 *   it.destroy();
 */
export fn end(Iterator mut *self)
  model safe(self)
  where false == self->ended
{
  self->ended = true;
  self->node = 0;
}
