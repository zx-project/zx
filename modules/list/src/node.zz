using list::{ List }

using zxutils as utils

/**
 * A node structure to contain pointers to a list node's value,
 * containing List structure, and next/prev nodes.
 */
export struct Node {
  void *value;
  List mut *list;
  Node mut *prev;
  Node mut *next;
}

/**
 * `Node` constructor. Initializes a `Node` pointer with a value pointer.
 * @example
 *   let node = zxlist::node::make();
 */
export fn make(Node new mut *self, void *value)
  model safe(self)
  where safe(value)
{
  self->prev = 0;
  self->next = 0;
  self->value = value;
}

/**
 * Detaches node from list and any unreferences links
 * @protected
 */
export fn unref(Node mut *self) -> Node mut *
  model safe(self)
{
  if 0 != self->prev {
    static_attest(safe(self->prev));
    self->prev->next = self->next;
  } else if 0 != self->list {
    static_attest(safe(self->list));
    self->list->head = self->next;
  }

  if 0 != self->next {
    static_attest(safe(self->next));
    self->next->prev = self->prev;
  } else if 0 != self->list {
    static_attest(safe(self->list));
    self->list->tail = self->prev;
  }

  self->list = 0;
  self->next = 0;
  self->prev = 0;

  return self;
}
