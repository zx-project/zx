using <curl/curl.h> as libcurl
using <assert.h>::{ assert }

using zx_curl::options as options

fn main() -> int {
  assert(options::WRITEDATA == (u32) libcurl::CURLOPT_WRITEDATA);
  assert(options::URL == (u32) libcurl::CURLOPT_URL);
  assert(options::PORT == (u32) libcurl::CURLOPT_PORT);
  assert(options::PROXY == (u32) libcurl::CURLOPT_PROXY);
  assert(options::USERPWD == (u32) libcurl::CURLOPT_USERPWD);
  assert(options::PROXYUSERPWD == (u32) libcurl::CURLOPT_PROXYUSERPWD);
  assert(options::RANGE == (u32) libcurl::CURLOPT_RANGE);
  assert(options::READDATA == (u32) libcurl::CURLOPT_READDATA);
  assert(options::ERRORBUFFER == (u32) libcurl::CURLOPT_ERRORBUFFER);
  assert(options::WRITEFUNCTION == (u32) libcurl::CURLOPT_WRITEFUNCTION);
  assert(options::READFUNCTION == (u32) libcurl::CURLOPT_READFUNCTION);
  assert(options::TIMEOUT == (u32) libcurl::CURLOPT_TIMEOUT);
  assert(options::INFILESIZE == (u32) libcurl::CURLOPT_INFILESIZE);
  assert(options::POSTFIELDS == (u32) libcurl::CURLOPT_POSTFIELDS);
  assert(options::REFERER == (u32) libcurl::CURLOPT_REFERER);
  assert(options::FTPPORT == (u32) libcurl::CURLOPT_FTPPORT);
  assert(options::USERAGENT == (u32) libcurl::CURLOPT_USERAGENT);
  assert(options::LOW_SPEED_LIMIT == (u32) libcurl::CURLOPT_LOW_SPEED_LIMIT);
  assert(options::LOW_SPEED_TIME == (u32) libcurl::CURLOPT_LOW_SPEED_TIME);
  assert(options::COOKIE == (u32) libcurl::CURLOPT_COOKIE);
  assert(options::HTTPHEADER == (u32) libcurl::CURLOPT_HTTPHEADER);
  assert(options::HTTPPOST == (u32) libcurl::CURLOPT_HTTPPOST);
  assert(options::SSLCERT == (u32) libcurl::CURLOPT_SSLCERT);
  assert(options::KEYPASSWD == (u32) libcurl::CURLOPT_KEYPASSWD);
  assert(options::QUOTE == (u32) libcurl::CURLOPT_QUOTE);
  assert(options::HEADERDATA == (u32) libcurl::CURLOPT_HEADERDATA);
  assert(options::COOKIEFILE == (u32) libcurl::CURLOPT_COOKIEFILE);
  assert(options::SSLVERSION == (u32) libcurl::CURLOPT_SSLVERSION);
  assert(options::TIMECONDITION == (u32) libcurl::CURLOPT_TIMECONDITION);
  assert(options::TIMEVALUE == (u32) libcurl::CURLOPT_TIMEVALUE);
  assert(options::CUSTOMREQUEST == (u32) libcurl::CURLOPT_CUSTOMREQUEST);
  assert(options::STDERR == (u32) libcurl::CURLOPT_STDERR);
  assert(options::POSTQUOTE == (u32) libcurl::CURLOPT_POSTQUOTE);
  assert(options::OBSOLETE40 == (u32) libcurl::CURLOPT_OBSOLETE40);
  assert(options::VERBOSE == (u32) libcurl::CURLOPT_VERBOSE);
  assert(options::HEADER == (u32) libcurl::CURLOPT_HEADER);
  assert(options::NOPROGRESS == (u32) libcurl::CURLOPT_NOPROGRESS);
  assert(options::NOBODY == (u32) libcurl::CURLOPT_NOBODY);
  assert(options::FAILONERROR == (u32) libcurl::CURLOPT_FAILONERROR);
  assert(options::UPLOAD == (u32) libcurl::CURLOPT_UPLOAD);
  assert(options::POST == (u32) libcurl::CURLOPT_POST);
  assert(options::DIRLISTONLY == (u32) libcurl::CURLOPT_DIRLISTONLY);
  assert(options::APPEND == (u32) libcurl::CURLOPT_APPEND);
  assert(options::NETRC == (u32) libcurl::CURLOPT_NETRC);
  assert(options::FOLLOWLOCATION == (u32) libcurl::CURLOPT_FOLLOWLOCATION);
  assert(options::TRANSFERTEXT == (u32) libcurl::CURLOPT_TRANSFERTEXT);
  assert(options::PUT == (u32) libcurl::CURLOPT_PUT);
  assert(options::PROGRESSFUNCTION == (u32) libcurl::CURLOPT_PROGRESSFUNCTION);
  assert(options::PROGRESSDATA == (u32) libcurl::CURLOPT_PROGRESSDATA);
  assert(options::AUTOREFERER == (u32) libcurl::CURLOPT_AUTOREFERER);
  assert(options::PROXYPORT == (u32) libcurl::CURLOPT_PROXYPORT);
  assert(options::POSTFIELDSIZE == (u32) libcurl::CURLOPT_POSTFIELDSIZE);
  assert(options::HTTPPROXYTUNNEL == (u32) libcurl::CURLOPT_HTTPPROXYTUNNEL);
  assert(options::INTERFACE == (u32) libcurl::CURLOPT_INTERFACE);
  assert(options::KRBLEVEL == (u32) libcurl::CURLOPT_KRBLEVEL);
  assert(options::SSL_VERIFYPEER == (u32) libcurl::CURLOPT_SSL_VERIFYPEER);
  assert(options::CAINFO == (u32) libcurl::CURLOPT_CAINFO);
  assert(options::MAXREDIRS == (u32) libcurl::CURLOPT_MAXREDIRS);
  assert(options::FILETIME == (u32) libcurl::CURLOPT_FILETIME);
  assert(options::TELNETOPTIONS == (u32) libcurl::CURLOPT_TELNETOPTIONS);
  assert(options::MAXCONNECTS == (u32) libcurl::CURLOPT_MAXCONNECTS);
  assert(options::OBSOLETE72 == (u32) libcurl::CURLOPT_OBSOLETE72);
  assert(options::FRESH_CONNECT == (u32) libcurl::CURLOPT_FRESH_CONNECT);
  assert(options::FORBID_REUSE == (u32) libcurl::CURLOPT_FORBID_REUSE);
  assert(options::RANDOM_FILE == (u32) libcurl::CURLOPT_RANDOM_FILE);
  assert(options::EGDSOCKET == (u32) libcurl::CURLOPT_EGDSOCKET);
  assert(options::CONNECTTIMEOUT == (u32) libcurl::CURLOPT_CONNECTTIMEOUT);
  assert(options::HEADERFUNCTION == (u32) libcurl::CURLOPT_HEADERFUNCTION);
  assert(options::HTTPGET == (u32) libcurl::CURLOPT_HTTPGET);
  assert(options::SSL_VERIFYHOST == (u32) libcurl::CURLOPT_SSL_VERIFYHOST);
  assert(options::COOKIEJAR == (u32) libcurl::CURLOPT_COOKIEJAR);
  assert(options::SSL_CIPHER_LIST == (u32) libcurl::CURLOPT_SSL_CIPHER_LIST);
  assert(options::HTTP_VERSION == (u32) libcurl::CURLOPT_HTTP_VERSION);
  assert(options::FTP_USE_EPSV == (u32) libcurl::CURLOPT_FTP_USE_EPSV);
  assert(options::SSLCERTTYPE == (u32) libcurl::CURLOPT_SSLCERTTYPE);
  assert(options::SSLKEY == (u32) libcurl::CURLOPT_SSLKEY);
  assert(options::SSLKEYTYPE == (u32) libcurl::CURLOPT_SSLKEYTYPE);
  assert(options::SSLENGINE == (u32) libcurl::CURLOPT_SSLENGINE);
  assert(options::SSLENGINE_DEFAULT == (u32) libcurl::CURLOPT_SSLENGINE_DEFAULT);
  assert(options::DNS_USE_GLOBAL_CACHE == (u32) libcurl::CURLOPT_DNS_USE_GLOBAL_CACHE);
  assert(options::DNS_CACHE_TIMEOUT == (u32) libcurl::CURLOPT_DNS_CACHE_TIMEOUT);
  assert(options::PREQUOTE == (u32) libcurl::CURLOPT_PREQUOTE);
  assert(options::DEBUGFUNCTION == (u32) libcurl::CURLOPT_DEBUGFUNCTION);
  assert(options::DEBUGDATA == (u32) libcurl::CURLOPT_DEBUGDATA);
  assert(options::COOKIESESSION == (u32) libcurl::CURLOPT_COOKIESESSION);
  assert(options::CAPATH == (u32) libcurl::CURLOPT_CAPATH);
  assert(options::BUFFERSIZE == (u32) libcurl::CURLOPT_BUFFERSIZE);
  assert(options::NOSIGNAL == (u32) libcurl::CURLOPT_NOSIGNAL);
  assert(options::SHARE == (u32) libcurl::CURLOPT_SHARE);
  assert(options::PROXYTYPE == (u32) libcurl::CURLOPT_PROXYTYPE);
  assert(options::ACCEPT_ENCODING == (u32) libcurl::CURLOPT_ACCEPT_ENCODING);
  assert(options::PRIVATE == (u32) libcurl::CURLOPT_PRIVATE);
  assert(options::HTTP200ALIASES == (u32) libcurl::CURLOPT_HTTP200ALIASES);
  assert(options::UNRESTRICTED_AUTH == (u32) libcurl::CURLOPT_UNRESTRICTED_AUTH);
  assert(options::FTP_USE_EPRT == (u32) libcurl::CURLOPT_FTP_USE_EPRT);
  assert(options::HTTPAUTH == (u32) libcurl::CURLOPT_HTTPAUTH);
  assert(options::SSL_CTX_FUNCTION == (u32) libcurl::CURLOPT_SSL_CTX_FUNCTION);
  assert(options::SSL_CTX_DATA == (u32) libcurl::CURLOPT_SSL_CTX_DATA);
  assert(options::FTP_CREATE_MISSING_DIRS == (u32) libcurl::CURLOPT_FTP_CREATE_MISSING_DIRS);
  assert(options::PROXYAUTH == (u32) libcurl::CURLOPT_PROXYAUTH);
  assert(options::FTP_RESPONSE_TIMEOUT == (u32) libcurl::CURLOPT_FTP_RESPONSE_TIMEOUT);
  assert(options::IPRESOLVE == (u32) libcurl::CURLOPT_IPRESOLVE);
  assert(options::MAXFILESIZE == (u32) libcurl::CURLOPT_MAXFILESIZE);
  assert(options::INFILESIZE_LARGE == (u32) libcurl::CURLOPT_INFILESIZE_LARGE);
  assert(options::RESUME_FROM_LARGE == (u32) libcurl::CURLOPT_RESUME_FROM_LARGE);
  assert(options::MAXFILESIZE_LARGE == (u32) libcurl::CURLOPT_MAXFILESIZE_LARGE);
  assert(options::NETRC_FILE == (u32) libcurl::CURLOPT_NETRC_FILE);
  assert(options::USE_SSL == (u32) libcurl::CURLOPT_USE_SSL);
  assert(options::POSTFIELDSIZE_LARGE == (u32) libcurl::CURLOPT_POSTFIELDSIZE_LARGE);
  assert(options::TCP_NODELAY == (u32) libcurl::CURLOPT_TCP_NODELAY);
  assert(options::FTPSSLAUTH == (u32) libcurl::CURLOPT_FTPSSLAUTH);
  assert(options::IOCTLFUNCTION == (u32) libcurl::CURLOPT_IOCTLFUNCTION);
  assert(options::IOCTLDATA == (u32) libcurl::CURLOPT_IOCTLDATA);
  assert(options::FTP_ACCOUNT == (u32) libcurl::CURLOPT_FTP_ACCOUNT);
  assert(options::COOKIELIST == (u32) libcurl::CURLOPT_COOKIELIST);
  assert(options::IGNORE_CONTENT_LENGTH == (u32) libcurl::CURLOPT_IGNORE_CONTENT_LENGTH);
  assert(options::FTP_SKIP_PASV_IP == (u32) libcurl::CURLOPT_FTP_SKIP_PASV_IP);
  assert(options::FTP_FILEMETHOD == (u32) libcurl::CURLOPT_FTP_FILEMETHOD);
  assert(options::LOCALPORT == (u32) libcurl::CURLOPT_LOCALPORT);
  assert(options::LOCALPORTRANGE == (u32) libcurl::CURLOPT_LOCALPORTRANGE);
  assert(options::CONNECT_ONLY == (u32) libcurl::CURLOPT_CONNECT_ONLY);
  assert(options::CONV_FROM_NETWORK_FUNCTION == (u32) libcurl::CURLOPT_CONV_FROM_NETWORK_FUNCTION);
  assert(options::CONV_TO_NETWORK_FUNCTION == (u32) libcurl::CURLOPT_CONV_TO_NETWORK_FUNCTION);
  assert(options::CONV_FROM_UTF8_FUNCTION == (u32) libcurl::CURLOPT_CONV_FROM_UTF8_FUNCTION);
  assert(options::MAX_SEND_SPEED_LARGE == (u32) libcurl::CURLOPT_MAX_SEND_SPEED_LARGE);
  assert(options::MAX_RECV_SPEED_LARGE == (u32) libcurl::CURLOPT_MAX_RECV_SPEED_LARGE);
  assert(options::FTP_ALTERNATIVE_TO_USER == (u32) libcurl::CURLOPT_FTP_ALTERNATIVE_TO_USER);
  assert(options::SOCKOPTFUNCTION == (u32) libcurl::CURLOPT_SOCKOPTFUNCTION);
  assert(options::SOCKOPTDATA == (u32) libcurl::CURLOPT_SOCKOPTDATA);
  assert(options::SSL_SESSIONID_CACHE == (u32) libcurl::CURLOPT_SSL_SESSIONID_CACHE);
  assert(options::SSH_AUTH_TYPES == (u32) libcurl::CURLOPT_SSH_AUTH_TYPES);
  assert(options::SSH_PUBLIC_KEYFILE == (u32) libcurl::CURLOPT_SSH_PUBLIC_KEYFILE);
  assert(options::SSH_PRIVATE_KEYFILE == (u32) libcurl::CURLOPT_SSH_PRIVATE_KEYFILE);
  assert(options::FTP_SSL_CCC == (u32) libcurl::CURLOPT_FTP_SSL_CCC);
  assert(options::TIMEOUT_MS == (u32) libcurl::CURLOPT_TIMEOUT_MS);
  assert(options::CONNECTTIMEOUT_MS == (u32) libcurl::CURLOPT_CONNECTTIMEOUT_MS);
  assert(options::HTTP_TRANSFER_DECODING == (u32) libcurl::CURLOPT_HTTP_TRANSFER_DECODING);
  assert(options::HTTP_CONTENT_DECODING == (u32) libcurl::CURLOPT_HTTP_CONTENT_DECODING);
  assert(options::NEW_FILE_PERMS == (u32) libcurl::CURLOPT_NEW_FILE_PERMS);
  assert(options::NEW_DIRECTORY_PERMS == (u32) libcurl::CURLOPT_NEW_DIRECTORY_PERMS);
  assert(options::POSTREDIR == (u32) libcurl::CURLOPT_POSTREDIR);
  assert(options::SSH_HOST_PUBLIC_KEY_MD5 == (u32) libcurl::CURLOPT_SSH_HOST_PUBLIC_KEY_MD5);
  assert(options::OPENSOCKETFUNCTION == (u32) libcurl::CURLOPT_OPENSOCKETFUNCTION);
  assert(options::OPENSOCKETDATA == (u32) libcurl::CURLOPT_OPENSOCKETDATA);
  assert(options::COPYPOSTFIELDS == (u32) libcurl::CURLOPT_COPYPOSTFIELDS);
  assert(options::PROXY_TRANSFER_MODE == (u32) libcurl::CURLOPT_PROXY_TRANSFER_MODE);
  assert(options::SEEKFUNCTION == (u32) libcurl::CURLOPT_SEEKFUNCTION);
  assert(options::SEEKDATA == (u32) libcurl::CURLOPT_SEEKDATA);
  assert(options::CRLFILE == (u32) libcurl::CURLOPT_CRLFILE);
  assert(options::ISSUERCERT == (u32) libcurl::CURLOPT_ISSUERCERT);
  assert(options::ADDRESS_SCOPE == (u32) libcurl::CURLOPT_ADDRESS_SCOPE);
  assert(options::CERTINFO == (u32) libcurl::CURLOPT_CERTINFO);
  assert(options::USERNAME == (u32) libcurl::CURLOPT_USERNAME);
  assert(options::PASSWORD == (u32) libcurl::CURLOPT_PASSWORD);
  assert(options::PROXYUSERNAME == (u32) libcurl::CURLOPT_PROXYUSERNAME);
  assert(options::PROXYPASSWORD == (u32) libcurl::CURLOPT_PROXYPASSWORD);
  assert(options::NOPROXY == (u32) libcurl::CURLOPT_NOPROXY);
  assert(options::TFTP_BLKSIZE == (u32) libcurl::CURLOPT_TFTP_BLKSIZE);
  assert(options::SOCKS5_GSSAPI_SERVICE == (u32) libcurl::CURLOPT_SOCKS5_GSSAPI_SERVICE);
  assert(options::SOCKS5_GSSAPI_NEC == (u32) libcurl::CURLOPT_SOCKS5_GSSAPI_NEC);
  assert(options::PROTOCOLS == (u32) libcurl::CURLOPT_PROTOCOLS);
  assert(options::REDIR_PROTOCOLS == (u32) libcurl::CURLOPT_REDIR_PROTOCOLS);
  assert(options::SSH_KNOWNHOSTS == (u32) libcurl::CURLOPT_SSH_KNOWNHOSTS);
  assert(options::SSH_KEYFUNCTION == (u32) libcurl::CURLOPT_SSH_KEYFUNCTION);
  assert(options::SSH_KEYDATA == (u32) libcurl::CURLOPT_SSH_KEYDATA);
  assert(options::MAIL_FROM == (u32) libcurl::CURLOPT_MAIL_FROM);
  assert(options::MAIL_RCPT == (u32) libcurl::CURLOPT_MAIL_RCPT);
  assert(options::FTP_USE_PRET == (u32) libcurl::CURLOPT_FTP_USE_PRET);
  assert(options::RTSP_REQUEST == (u32) libcurl::CURLOPT_RTSP_REQUEST);
  assert(options::RTSP_SESSION_ID == (u32) libcurl::CURLOPT_RTSP_SESSION_ID);
  assert(options::RTSP_STREAM_URI == (u32) libcurl::CURLOPT_RTSP_STREAM_URI);
  assert(options::RTSP_TRANSPORT == (u32) libcurl::CURLOPT_RTSP_TRANSPORT);
  assert(options::RTSP_CLIENT_CSEQ == (u32) libcurl::CURLOPT_RTSP_CLIENT_CSEQ);
  assert(options::RTSP_SERVER_CSEQ == (u32) libcurl::CURLOPT_RTSP_SERVER_CSEQ);
  assert(options::INTERLEAVEDATA == (u32) libcurl::CURLOPT_INTERLEAVEDATA);
  assert(options::INTERLEAVEFUNCTION == (u32) libcurl::CURLOPT_INTERLEAVEFUNCTION);
  assert(options::WILDCARDMATCH == (u32) libcurl::CURLOPT_WILDCARDMATCH);
  assert(options::CHUNK_BGN_FUNCTION == (u32) libcurl::CURLOPT_CHUNK_BGN_FUNCTION);
  assert(options::CHUNK_END_FUNCTION == (u32) libcurl::CURLOPT_CHUNK_END_FUNCTION);
  assert(options::FNMATCH_FUNCTION == (u32) libcurl::CURLOPT_FNMATCH_FUNCTION);
  assert(options::CHUNK_DATA == (u32) libcurl::CURLOPT_CHUNK_DATA);
  assert(options::FNMATCH_DATA == (u32) libcurl::CURLOPT_FNMATCH_DATA);
  assert(options::RESOLVE == (u32) libcurl::CURLOPT_RESOLVE);
  assert(options::TLSAUTH_USERNAME == (u32) libcurl::CURLOPT_TLSAUTH_USERNAME);
  assert(options::TLSAUTH_PASSWORD == (u32) libcurl::CURLOPT_TLSAUTH_PASSWORD);
  assert(options::TLSAUTH_TYPE == (u32) libcurl::CURLOPT_TLSAUTH_TYPE);
  assert(options::TRANSFER_ENCODING == (u32) libcurl::CURLOPT_TRANSFER_ENCODING);
  assert(options::CLOSESOCKETFUNCTION == (u32) libcurl::CURLOPT_CLOSESOCKETFUNCTION);
  assert(options::CLOSESOCKETDATA == (u32) libcurl::CURLOPT_CLOSESOCKETDATA);
  assert(options::GSSAPI_DELEGATION == (u32) libcurl::CURLOPT_GSSAPI_DELEGATION);
  assert(options::DNS_SERVERS == (u32) libcurl::CURLOPT_DNS_SERVERS);
  assert(options::ACCEPTTIMEOUT_MS == (u32) libcurl::CURLOPT_ACCEPTTIMEOUT_MS);
  assert(options::TCP_KEEPALIVE == (u32) libcurl::CURLOPT_TCP_KEEPALIVE);
  assert(options::TCP_KEEPIDLE == (u32) libcurl::CURLOPT_TCP_KEEPIDLE);
  assert(options::TCP_KEEPINTVL == (u32) libcurl::CURLOPT_TCP_KEEPINTVL);
  assert(options::SSL_OPTIONS == (u32) libcurl::CURLOPT_SSL_OPTIONS);
  assert(options::MAIL_AUTH == (u32) libcurl::CURLOPT_MAIL_AUTH);
  assert(options::SASL_IR == (u32) libcurl::CURLOPT_SASL_IR);
  assert(options::XFERINFOFUNCTION == (u32) libcurl::CURLOPT_XFERINFOFUNCTION);
  assert(options::XOAUTH2_BEARER == (u32) libcurl::CURLOPT_XOAUTH2_BEARER);
  assert(options::DNS_INTERFACE == (u32) libcurl::CURLOPT_DNS_INTERFACE);
  assert(options::DNS_LOCAL_IP4 == (u32) libcurl::CURLOPT_DNS_LOCAL_IP4);
  assert(options::DNS_LOCAL_IP6 == (u32) libcurl::CURLOPT_DNS_LOCAL_IP6);
  assert(options::LOGIN_OPTIONS == (u32) libcurl::CURLOPT_LOGIN_OPTIONS);
  assert(options::SSL_ENABLE_NPN == (u32) libcurl::CURLOPT_SSL_ENABLE_NPN);
  assert(options::SSL_ENABLE_ALPN == (u32) libcurl::CURLOPT_SSL_ENABLE_ALPN);
  assert(options::EXPECT_100_TIMEOUT_MS == (u32) libcurl::CURLOPT_EXPECT_100_TIMEOUT_MS);
  assert(options::PROXYHEADER == (u32) libcurl::CURLOPT_PROXYHEADER);
  assert(options::HEADEROPT == (u32) libcurl::CURLOPT_HEADEROPT);
  assert(options::PINNEDPUBLICKEY == (u32) libcurl::CURLOPT_PINNEDPUBLICKEY);
  assert(options::UNIX_SOCKET_PATH == (u32) libcurl::CURLOPT_UNIX_SOCKET_PATH);
  assert(options::SSL_VERIFYSTATUS == (u32) libcurl::CURLOPT_SSL_VERIFYSTATUS);
  assert(options::SSL_FALSESTART == (u32) libcurl::CURLOPT_SSL_FALSESTART);
  assert(options::PATH_AS_IS == (u32) libcurl::CURLOPT_PATH_AS_IS);
  assert(options::PROXY_SERVICE_NAME == (u32) libcurl::CURLOPT_PROXY_SERVICE_NAME);
  assert(options::SERVICE_NAME == (u32) libcurl::CURLOPT_SERVICE_NAME);
  assert(options::PIPEWAIT == (u32) libcurl::CURLOPT_PIPEWAIT);
  assert(options::DEFAULT_PROTOCOL == (u32) libcurl::CURLOPT_DEFAULT_PROTOCOL);
  assert(options::STREAM_WEIGHT == (u32) libcurl::CURLOPT_STREAM_WEIGHT);
  assert(options::STREAM_DEPENDS == (u32) libcurl::CURLOPT_STREAM_DEPENDS);
  assert(options::STREAM_DEPENDS_E == (u32) libcurl::CURLOPT_STREAM_DEPENDS_E);
  assert(options::TFTP_NO_OPTIONS == (u32) libcurl::CURLOPT_TFTP_NO_OPTIONS);
  assert(options::CONNECT_TO == (u32) libcurl::CURLOPT_CONNECT_TO);
  assert(options::TCP_FASTOPEN == (u32) libcurl::CURLOPT_TCP_FASTOPEN);
  assert(options::KEEP_SENDING_ON_ERROR == (u32) libcurl::CURLOPT_KEEP_SENDING_ON_ERROR);
  assert(options::PROXY_CAINFO == (u32) libcurl::CURLOPT_PROXY_CAINFO);
  assert(options::PROXY_CAPATH == (u32) libcurl::CURLOPT_PROXY_CAPATH);
  assert(options::PROXY_SSL_VERIFYPEER == (u32) libcurl::CURLOPT_PROXY_SSL_VERIFYPEER);
  assert(options::PROXY_SSL_VERIFYHOST == (u32) libcurl::CURLOPT_PROXY_SSL_VERIFYHOST);
  assert(options::PROXY_SSLVERSION == (u32) libcurl::CURLOPT_PROXY_SSLVERSION);
  assert(options::PROXY_TLSAUTH_USERNAME == (u32) libcurl::CURLOPT_PROXY_TLSAUTH_USERNAME);
  assert(options::PROXY_TLSAUTH_PASSWORD == (u32) libcurl::CURLOPT_PROXY_TLSAUTH_PASSWORD);
  assert(options::PROXY_TLSAUTH_TYPE == (u32) libcurl::CURLOPT_PROXY_TLSAUTH_TYPE);
  assert(options::PROXY_SSLCERT == (u32) libcurl::CURLOPT_PROXY_SSLCERT);
  assert(options::PROXY_SSLCERTTYPE == (u32) libcurl::CURLOPT_PROXY_SSLCERTTYPE);
  assert(options::PROXY_SSLKEY == (u32) libcurl::CURLOPT_PROXY_SSLKEY);
  assert(options::PROXY_SSLKEYTYPE == (u32) libcurl::CURLOPT_PROXY_SSLKEYTYPE);
  assert(options::PROXY_KEYPASSWD == (u32) libcurl::CURLOPT_PROXY_KEYPASSWD);
  assert(options::PROXY_SSL_CIPHER_LIST == (u32) libcurl::CURLOPT_PROXY_SSL_CIPHER_LIST);
  assert(options::PROXY_CRLFILE == (u32) libcurl::CURLOPT_PROXY_CRLFILE);
  assert(options::PROXY_SSL_OPTIONS == (u32) libcurl::CURLOPT_PROXY_SSL_OPTIONS);
  assert(options::PRE_PROXY == (u32) libcurl::CURLOPT_PRE_PROXY);
  assert(options::PROXY_PINNEDPUBLICKEY == (u32) libcurl::CURLOPT_PROXY_PINNEDPUBLICKEY);
  assert(options::ABSTRACT_UNIX_SOCKET == (u32) libcurl::CURLOPT_ABSTRACT_UNIX_SOCKET);
  assert(options::SUPPRESS_CONNECT_HEADERS == (u32) libcurl::CURLOPT_SUPPRESS_CONNECT_HEADERS);
  assert(options::REQUEST_TARGET == (u32) libcurl::CURLOPT_REQUEST_TARGET);
  assert(options::SOCKS5_AUTH == (u32) libcurl::CURLOPT_SOCKS5_AUTH);
  assert(options::SSH_COMPRESSION == (u32) libcurl::CURLOPT_SSH_COMPRESSION);
  assert(options::MIMEPOST == (u32) libcurl::CURLOPT_MIMEPOST);
  //assert(options::TIMEVALUE_LARGE == (u32) libcurl::CURLOPT_TIMEVALUE_LARGE);
  //assert(options::HAPPY_EYEBALLS_TIMEOUT_MS == (u32) libcurl::CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS);
  //assert(options::RESOLVER_START_FUNCTION == (u32) libcurl::CURLOPT_RESOLVER_START_FUNCTION);
  //assert(options::RESOLVER_START_DATA == (u32) libcurl::CURLOPT_RESOLVER_START_DATA);
  //assert(options::HAPROXYPROTOCOL == (u32) libcurl::CURLOPT_HAPROXYPROTOCOL);
  //assert(options::DNS_SHUFFLE_ADDRESSES == (u32) libcurl::CURLOPT_DNS_SHUFFLE_ADDRESSES);
  //assert(options::TLS13_CIPHERS == (u32) libcurl::CURLOPT_TLS13_CIPHERS);
  //assert(options::PROXY_TLS13_CIPHERS == (u32) libcurl::CURLOPT_PROXY_TLS13_CIPHERS);
  //assert(options::DISALLOW_USERNAME_IN_URL == (u32) libcurl::CURLOPT_DISALLOW_USERNAME_IN_URL);
  //assert(options::DOH_URL == (u32) libcurl::CURLOPT_DOH_URL);
  //assert(options::UPLOAD_BUFFERSIZE == (u32) libcurl::CURLOPT_UPLOAD_BUFFERSIZE);
  //assert(options::UPKEEP_INTERVAL_MS == (u32) libcurl::CURLOPT_UPKEEP_INTERVAL_MS);
  //assert(options::CURLU == (u32) libcurl::CURLOPT_CURLU);
  //assert(options::TRAILERFUNCTION == (u32) libcurl::CURLOPT_TRAILERFUNCTION);
  //assert(options::TRAILERDATA == (u32) libcurl::CURLOPT_TRAILERDATA);
  //assert(options::HTTP09_ALLOWED == (u32) libcurl::CURLOPT_HTTP09_ALLOWED);
  //assert(options::ALTSVC_CTRL == (u32) libcurl::CURLOPT_ALTSVC_CTRL);
  //assert(options::ALTSVC == (u32) libcurl::CURLOPT_ALTSVC);
  //assert(options::MAXAGE_CONN == (u32) libcurl::CURLOPT_MAXAGE_CONN);
  return 0;
}
