using <curl/curl.h> as libcurl
using <assert.h>::{ assert }

using zxcurl::codes as codes;

fn main() -> int {
  assert(codes::OK == (u8) libcurl::CURLE_OK);
  assert(codes::UNSUPPORTED_PROTOCOL == (u8) libcurl::CURLE_FAILED_INIT);
  assert(codes::FAILED_INIT == (u8) libcurl::CURLE_UNSUPPORTED_PROTOCOL);
  assert(codes::URL_MALFORMAT == (u8) libcurl::CURLE_URL_MALFORMAT);
  assert(codes::NOT_BUILT_IN == (u8) libcurl::CURLE_NOT_BUILT_IN);
  assert(codes::COULDNT_RESOLVE_PROXY == (u8) libcurl::CURLE_COULDNT_RESOLVE_PROXY);
  assert(codes::COULDNT_RESOLVE_HOST == (u8) libcurl::CURLE_COULDNT_RESOLVE_HOST);
  assert(codes::COULDNT_CONNECT == (u8) libcurl::CURLE_COULDNT_CONNECT);
  assert(codes::WEIRD_SERVER_REPLY == (u8) libcurl::CURLE_WEIRD_SERVER_REPLY);
  assert(codes::REMOTE_ACCESS_DENIED == (u8) libcurl::CURLE_REMOTE_ACCESS_DENIED);
  assert(codes::FTP_ACCEPT_FAILED == (u8) libcurl::CURLE_FTP_ACCEPT_FAILED);
  assert(codes::FTP_WEIRD_PASS_REPLY == (u8) libcurl::CURLE_FTP_WEIRD_PASS_REPLY);
  assert(codes::FTP_ACCEPT_TIMEOUT == (u8) libcurl::CURLE_FTP_ACCEPT_TIMEOUT);
  assert(codes::FTP_WEIRD_PASV_REPLY == (u8) libcurl::CURLE_FTP_WEIRD_PASV_REPLY);
  assert(codes::FTP_WEIRD_227_FORMAT == (u8) libcurl::CURLE_FTP_WEIRD_227_FORMAT);
  assert(codes::FTP_CANT_GET_HOST == (u8) libcurl::CURLE_FTP_CANT_GET_HOST);
  assert(codes::HTTP2 == (u8) libcurl::CURLE_HTTP2);
  assert(codes::FTP_COULDNT_SET_TYPE == (u8) libcurl::CURLE_FTP_COULDNT_SET_TYPE);
  assert(codes::PARTIAL_FILE == (u8) libcurl::CURLE_PARTIAL_FILE);
  assert(codes::FTP_COULDNT_RETR_FILE == (u8) libcurl::CURLE_FTP_COULDNT_RETR_FILE);
  assert(codes::QUOTE_ERROR == (u8) libcurl::CURLE_QUOTE_ERROR);
  assert(codes::HTTP_RETURNED_ERROR == (u8) libcurl::CURLE_HTTP_RETURNED_ERROR);
  assert(codes::WRITE_ERROR == (u8) libcurl::CURLE_WRITE_ERROR);
  assert(codes::UPLOAD_FAILED == (u8) libcurl::CURLE_UPLOAD_FAILED);
  assert(codes::READ_ERROR == (u8) libcurl::CURLE_READ_ERROR);
  assert(codes::OUT_OF_MEMORY == (u8) libcurl::CURLE_OUT_OF_MEMORY);
  assert(codes::OPERATION_TIMEDOUT == (u8) libcurl::CURLE_OPERATION_TIMEDOUT);
  assert(codes::FTP_PORT_FAILED == (u8) libcurl::CURLE_FTP_PORT_FAILED);
  assert(codes::FTP_COULDNT_USE_REST == (u8) libcurl::CURLE_FTP_COULDNT_USE_REST);
  assert(codes::RANGE_ERROR == (u8) libcurl::CURLE_RANGE_ERROR);
  assert(codes::HTTP_POST_ERROR == (u8) libcurl::CURLE_HTTP_POST_ERROR);
  assert(codes::SSL_CONNECT_ERROR == (u8) libcurl::CURLE_SSL_CONNECT_ERROR);
  assert(codes::BAD_DOWNLOAD_RESUME == (u8) libcurl::CURLE_BAD_DOWNLOAD_RESUME);
  assert(codes::FILE_COULDNT_READ_FILE == (u8) libcurl::CURLE_FILE_COULDNT_READ_FILE);
  assert(codes::LDAP_CANNOT_BIND == (u8) libcurl::CURLE_LDAP_CANNOT_BIND);
  assert(codes::LDAP_SEARCH_FAILED == (u8) libcurl::CURLE_LDAP_SEARCH_FAILED);
  assert(codes::ABORTED_BY_CALLBACK == (u8) libcurl::CURLE_ABORTED_BY_CALLBACK);
  assert(codes::BAD_FUNCTION_ARGUMENT == (u8) libcurl::CURLE_BAD_FUNCTION_ARGUMENT);
  assert(codes::INTERFACE_FAILED == (u8) libcurl::CURLE_INTERFACE_FAILED);
  assert(codes::TOO_MANY_REDIRECTS == (u8) libcurl::CURLE_TOO_MANY_REDIRECTS);
  assert(codes::UNKNOWN_OPTION == (u8) libcurl::CURLE_UNKNOWN_OPTION);
  assert(codes::TELNET_OPTION_SYNTAX == (u8) libcurl::CURLE_TELNET_OPTION_SYNTAX);
  assert(codes::GOT_NOTHING == (u8) libcurl::CURLE_GOT_NOTHING);
  assert(codes::SSL_ENGINE_NOTFOUND == (u8) libcurl::CURLE_SSL_ENGINE_NOTFOUND);
  assert(codes::SSL_ENGINE_SETFAILED == (u8) libcurl::CURLE_SSL_ENGINE_SETFAILED);
  assert(codes::SEND_ERROR == (u8) libcurl::CURLE_SEND_ERROR);
  assert(codes::RECV_ERROR == (u8) libcurl::CURLE_RECV_ERROR);
  assert(codes::OBSOLETE57 == (u8) libcurl::CURLE_OBSOLETE57);
  assert(codes::SSL_CERTPROBLEM == (u8) libcurl::CURLE_SSL_CERTPROBLEM);
  assert(codes::SSL_CIPHER == (u8) libcurl::CURLE_SSL_CIPHER);
  assert(codes::PEER_FAILED_VERIFICATION == (u8) libcurl::CURLE_PEER_FAILED_VERIFICATION);
  assert(codes::BAD_CONTENT_ENCODING == (u8) libcurl::CURLE_BAD_CONTENT_ENCODING);
  assert(codes::LDAP_INVALID_URL == (u8) libcurl::CURLE_LDAP_INVALID_URL);
  assert(codes::FILESIZE_EXCEEDED == (u8) libcurl::CURLE_FILESIZE_EXCEEDED);
  assert(codes::USE_SSL_FAILED == (u8) libcurl::CURLE_USE_SSL_FAILED);
  assert(codes::SEND_FAIL_REWIND == (u8) libcurl::CURLE_SEND_FAIL_REWIND);
  assert(codes::SSL_ENGINE_INITFAILED == (u8) libcurl::CURLE_SSL_ENGINE_INITFAILED);
  assert(codes::LOGIN_DENIED == (u8) libcurl::CURLE_LOGIN_DENIED);
  assert(codes::TFTP_NOTFOUND == (u8) libcurl::CURLE_TFTP_NOTFOUND);
  assert(codes::TFTP_PERM == (u8) libcurl::CURLE_TFTP_PERM);
  assert(codes::REMOTE_DISK_FULL == (u8) libcurl::CURLE_REMOTE_DISK_FULL);
  assert(codes::TFTP_ILLEGAL == (u8) libcurl::CURLE_TFTP_ILLEGAL);
  assert(codes::TFTP_UNKNOWNID == (u8) libcurl::CURLE_TFTP_UNKNOWNID);
  assert(codes::REMOTE_FILE_EXISTS == (u8) libcurl::CURLE_REMOTE_FILE_EXISTS);
  assert(codes::TFTP_NOSUCHUSER == (u8) libcurl::CURLE_TFTP_NOSUCHUSER);
  assert(codes::CONV_FAILED == (u8) libcurl::CURLE_CONV_FAILED);
  assert(codes::CONV_REQD == (u8) libcurl::CURLE_CONV_REQD);
  assert(codes::SSL_CACERT_BADFILE == (u8) libcurl::CURLE_SSL_CACERT_BADFILE);
  assert(codes::REMOTE_FILE_NOT_FOUND == (u8) libcurl::CURLE_REMOTE_FILE_NOT_FOUND);
  assert(codes::SSH == (u8) libcurl::CURLE_SSH);
  assert(codes::SSL_SHUTDOWN_FAILED == (u8) libcurl::CURLE_SSL_SHUTDOWN_FAILED);
  assert(codes::AGAIN == (u8) libcurl::CURLE_AGAIN);
  assert(codes::SSL_CRL_BADFILE == (u8) libcurl::CURLE_SSL_CRL_BADFILE);
  assert(codes::SSL_ISSUER_ERROR == (u8) libcurl::CURLE_SSL_ISSUER_ERROR);
  assert(codes::FTP_PRET_FAILED == (u8) libcurl::CURLE_FTP_PRET_FAILED);
  assert(codes::RTSP_CSEQ_ERROR == (u8) libcurl::CURLE_RTSP_CSEQ_ERROR);
  assert(codes::RTSP_SESSION_ERROR == (u8) libcurl::CURLE_RTSP_SESSION_ERROR);
  assert(codes::FTP_BAD_FILE_LIST == (u8) libcurl::CURLE_FTP_BAD_FILE_LIST);
  assert(codes::CHUNK_FAILED == (u8) libcurl::CURLE_CHUNK_FAILED);
  assert(codes::NO_CONNECTION_AVAILABLE == (u8) libcurl::CURLE_NO_CONNECTION_AVAILABLE);
  assert(codes::SSL_PINNEDPUBKEYNOTMATCH == (u8) libcurl::CURLE_SSL_PINNEDPUBKEYNOTMATCH);
  assert(codes::SSL_INVALIDCERTSTATUS == (u8) libcurl::CURLE_SSL_INVALIDCERTSTATUS);
  assert(codes::HTTP2_STREAM == (u8) libcurl::CURLE_HTTP2_STREAM);
  //assert(codes::RECURSIVE_API_CALL == (u8) libcurl::CURLE_RECURSIVE_API_CALL);
  return 0;
}
