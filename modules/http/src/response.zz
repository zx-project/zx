using <stdint.h>::{ uintptr_t }
using <string.h>::{ strncmp }
using <stdio.h>::{ printf }

using zxcurl::{ Context as CURLContext }
using zxlist::{ List }
using pool::{ Pool }
using err::{ assert }

using zxutils as utils
using zxcurl as curl
using zxlist
using pool

using header::{ Header, make as make_header }
using header_list::{ HeaderList }
using request::{ Request }

using header_list

const usize ALIGN = (usize) sizeof(uintptr_t);

export struct Response+ {
  CURLContext ctx;
  Request *request;
  bool ok;
  u8 status;
  char *http_version;
  char *reason_phrase;
  HeaderList headers;
  usize length;
  u8 *data;
  Pool+ mut pool;
}

export struct InternalResponse {
  CURLContext ctx;
  usize mut * mut length;
  ResponseReadState mut state;
  HeaderList mut *headers;
  u8 mut *data;
  Pool mut *pool;
}

export struct ResponseReadState {
  usize offset;
  usize size;
}

export fn internal(InternalResponse new mut *self, Response+length mut *response) {
  pool::make(&response->pool, 1024); // alloc() not used
  header_list::make(&response->headers);

  static_attest(len(response->pool.pool) > ALIGN);
  response->data = response->pool.pool + ALIGN;

  self->headers = (HeaderList mut *) &response->headers;
  self->length = (usize mut *) &response->length;
  self->pool = &response->pool;
  self->ctx = response->ctx;

  self->data = (u8 mut *) response->data;
}

export fn destroy(Response+length mut *self)
  model safe(self)
{
  self->ctx.cleanup();
}

export fn write_callback(void *data, usize size, usize chunks, void *ptr) -> usize
  model safe(ptr)
{
  let mut res = (InternalResponse mut *) ptr;

  static_attest(safe(res->pool));
  static_attest(safe(res->length));

  let mut state = (ResponseReadState mut *) &res->state;
  let byte_length = (usize) utils::math::min(res->pool->poolsize, size * chunks);

  if byte_length > 0 {
    let offset = (usize) state->offset;
    let mut length = (usize) utils::math::min(byte_length, res->pool->free_bytes());
    let mut buffer = (u8 mut *) res->pool->malloc(length);

    if 0 != buffer {
      static_attest(safe(buffer));
      utils::memory::zero(buffer, length);
      // read response data into the internal response data pointer
      utils::memory::copy(buffer, data, length);
      state->size += length;
      state->offset = state->size;

      *res->length = state->size;
    }

    if 0 == length {
      static_attest(safe(res->data));
      static_attest(len(res->data) > state->size);
      res->data[state->size] = 0;
    }

    return length;
  }

  return byte_length;
}

export fn header_callback(void *data, usize size, usize chunks, void *ptr) -> usize
  model safe(ptr)
{
  let byte_length = (usize) size * chunks;
  let mut bytes = (u8 *) data;
  let mut res = (InternalResponse *) ptr;

  // @TODO(jwerle): parse and store status line info
  if byte_length >= 5 {
    if
      0 == strncmp("http/", (char *) bytes, 5) ||
      0 == strncmp("HTTP/", (char *) bytes, 5)
    {
      return byte_length;
    }
  }

  if byte_length > 2 {
    if 0 != res {
      static_attest(safe(res));
      if 0 != res->headers {
        static_attest(safe(res->headers));
        let mut headers = res->headers;
        let mut header = (Header mut *) headers->pool.alloc();

        static_attest(safe(header));
        make_header(header, bytes, byte_length);

        static_attest(safe(headers));
        static_attest(safe(headers->list));
        static_attest(headers->list.length < 100);
        headers->list.push(header);
      }
    }
  }

  return byte_length;
}
