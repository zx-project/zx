using zxcurl::{ Context as CURLContext }
using zxutils as utils
using zxcurl as curl

using response::{ InternalResponse, Response }
using response
using method

export struct RequestOptions {
  u8 method;
  char *custom_method;
  char *url;
}

export struct Request {
  Response *response;
}

export fn request(Response+length new mut *self, RequestOptions request_opts)

  where nullterm(request_opts.url)
  where request_opts.method > 0
  where length > 0
{
  static_assert(length > 0);
  static_assert(request_opts.method > 0);

  new internal = response::internal(self);
  new opts = normalize_options(request_opts);
  new req = initialize_request(self);
  new ctx = curl::easy::init();

  configure_curl(ctx, &internal, opts);

  self->length = 0;
  self->ctx = ctx;

  ctx.perform();

}

export fn get(Response+length new mut *self, RequestOptions opts)
  model 0 == opts.method
{
  static_attest(length > 0);
  static_attest(nullterm(opts.url));
  static_attest(0 == opts.method);

  request(self, RequestOptions {
    method: method::GET,
    url: opts.url
  })
}

export fn head(Response+length new mut *self, RequestOptions opts)
  model 0 == opts.method
{
  static_attest(length > 0);
  static_attest(nullterm(opts.url));
  static_attest(0 == opts.method);

  request(self, RequestOptions {
    method: method::HEAD,
    url: opts.url
  })
}

fn normalize_options(RequestOptions mut new *self, RequestOptions opts)
  model safe(opts.url)
  model nullterm(opts.url)
{
  static_attest(safe(opts.url));
  static_attest(nullterm(opts.url));

  utils::memory::copy(self, &opts, sizeof(RequestOptions));

  if (0 == self->method) {
    if (0 == self->custom_method) {
      self->method = method::GET;
    }
  }
}

fn initialize_request(Request new mut *self, Response mut *response) {
  self->response = response;
  response->request = (Request *) self;
}

fn configure_curl(
  CURLContext mut ctx,
  InternalResponse *internal,
  RequestOptions opts
) {
  ctx.setopt(curl::options::URL, (void *) opts.url);
  ctx.setopt(curl::options::FOLLOWLOCATION, (void *) 1);

  ctx.setopt(curl::options::HEADERDATA, internal);
  ctx.setopt(curl::options::WRITEDATA, internal);

  ctx.setopt(curl::options::HEADERFUNCTION, (void *) response::header_callback);
  ctx.setopt(curl::options::WRITEFUNCTION, (void *) response::write_callback);

  switch opts.method {
    method::GET => {
      ctx.setopt(curl::options::HTTPGET, (void *) 1);
    }

    method::POST => {
      ctx.setopt(curl::options::POST, (void *) 1);
    }

    method::PUT => {
      ctx.setopt(curl::options::PUT, (void *) 1);
    }

    method::DELETE => {
      ctx.setopt(curl::options::CUSTOMREQUEST, method::string(method::DELETE));
    }

    method::HEAD => {
      ctx.setopt(curl::options::CUSTOMREQUEST, method::string(method::HEAD));
    }

    method::PATCH => {
      ctx.setopt(curl::options::CUSTOMREQUEST, method::string(method::PATCH));
    }

    method::OPTIONS => {
      ctx.setopt(curl::options::CUSTOMREQUEST, method::string(method::OPTIONS));
    }

    default => {
      ctx.setopt(curl::options::CUSTOMREQUEST, opts.custom_method);
    }
  }
}
