using <assert.h>::{ assert }
using <string.h>::{ strcmp }
using <stdio.h>::{ printf }

using zx_utils as utils

fn main() -> int {
  test_list();
  test_list_rpush();
  test_list_lpush();
  test_list_rpop();
  test_list_lpop();
  test_list_find();
  test_list_at();
  test_list_remove();
  test_list_pop();
  test_list_push();
  test_list_shift();
  test_list_unshift();

  test_list_node();
  test_list_iterator();

  return 0;
}

fn test_list() {
  // static
  {

    new list = utils::list::init();
    static_attest(safe(list.internal));
    assert(false == list.alloc);
    assert(0 == list.head);
    assert(0 == list.tail);
    assert(0 == list.length);
    list.destroy();
  }

  // alloc
  {
    let list = utils::list::create();
    static_attest(safe(list));
    static_attest(safe(list->internal));
    assert(true == list->alloc);
    assert(0 == list->head);
    assert(0 == list->tail);
    assert(0 == list->length);
    list->destroy();
  }
}

fn test_list_rpush() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  let node = list.rpush("hello");
  static_attest(safe(node));
  assert(1 == list.length);
  (void) node;
  list.destroy();
}

fn test_list_lpush() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  let node = list.lpush("hello");
  static_attest(safe(node));
  assert(1 == list.length);
  (void) node;
  list.destroy();
}

fn test_list_rpop() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  list.rpush("hello");
  let mut node = list.rpush("world");
  static_attest(safe(node));
  assert(2 == list.length);
  assert(node == list.rpop());
  assert(1 == list.length);
  node->destroy();
  list.destroy();
}

fn test_list_lpop() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  let mut node = list.rpush("hello");
  list.rpush("world");
  static_attest(safe(node));
  assert(2 == list.length);
  assert(node == list.lpop());
  assert(1 == list.length);
  node->destroy();
  list.destroy();
}

fn test_list_find() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  let mut node = list.rpush("hello");
  list.rpush("world");
  static_attest(safe(node));
  let found = list.find("hello");
  static_attest(safe(found));
  assert(node == found);
  assert(0 == strcmp("hello", found->value));
  node->destroy();
  list.destroy();
}

fn test_list_at() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  let hello = list.rpush("hello");
  let world = list.rpush("world");
  assert(hello == list.at(0));
  assert(world == list.at(1));
  assert(0 == list.at(2));
  list.destroy();
}

fn test_list_remove() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  list.rpush("hello");
  list.rpush("world");
  assert(2 == list.length);
  list.remove("hello");
  assert(1 == list.length);
  assert(0 == list.find("hello"));
  list.remove("world");
  assert(0 == list.length);
  assert(0 == list.find("world"));
  list.destroy();
}

fn test_list_pop() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  list.rpush("hello");
  let mut node = list.rpush("world");
  static_attest(safe(node));
  assert(2 == list.length);
  assert(node == list.pop());
  assert(1 == list.length);
  node->destroy();
  list.destroy();
}

fn test_list_push() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  list.push("hello");
  let mut node = list.push("world");
  static_attest(safe(node));
  assert(2 == list.length);
  assert(node == list.pop());
  assert(1 == list.length);
  node->destroy();
  list.destroy();
}

fn test_list_shift() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  let mut node = list.push("hello");
  list.push("world");
  static_attest(safe(node));
  assert(2 == list.length);
  assert(node == list.shift());
  assert(1 == list.length);
  node->destroy();
  list.destroy();
}

fn test_list_unshift() {
  new mut list = utils::list::init();
  static_attest(safe(list));
  let node = list.unshift("hello");
  static_attest(safe(node));
  assert(node == list.pop());
  node->destroy();
  (void) node;
  list.destroy();
}

fn test_list_node() {
  {
    new node = utils::list_node::init("hello");
    assert(0 == strcmp("hello", node.value));
    node.destroy();
  }

  {
    new nested = utils::list_node::init("hello");
    new node = utils::list_node::init(&nested);
    static_attest(safe(node));
    let value = (utils::list_node::Node *) node.value;
    static_attest(safe(value));
    assert(0 == strcmp("hello", value->value));
    nested.destroy();
    node.destroy();
  }

  {
    new mut list = utils::list::init();
    let start = list.push("start");
    let middle0 = list.push("middle0");
    let middle1 = list.push("middle1");
    let middle2 = list.push("middle2");
    let end = list.push("end");

    static_attest(safe(start));
    static_attest(safe(middle0));
    static_attest(safe(middle1));
    static_attest(safe(middle2));
    static_attest(safe(end));

    assert(start == list.head);
    assert(end == list.tail);

    assert(0 == start->prev);
    assert(middle0 == start->next);

    assert(start == middle0->prev);
    assert(middle1 == middle0->next);

    assert(middle0 == middle1->prev);
    assert(middle2 == middle1->next);

    assert(middle1 == middle2->prev);
    assert(end == middle2->next);

    assert(middle2 == end->prev);
    assert(0 == end->next);

    list.destroy();
  }
}

fn test_list_iterator() {
  new mut list = utils::list::init();
  let mut copy = utils::list::create(); // alloc

  static_attest(safe(list));
  static_attest(safe(copy));

  list.push("a");
  list.push("b");
  list.push("c");
  list.push("d");
  list.push("e");

  {
    let mut it = list.iterator();
    while !it->ended {
      let node = it->next();
      static_attest(safe(node));
      static_attest(safe(node->value));
      copy->push(node->value);
    }

    assert(list.length == copy->length);
  }

  {
    let mut it = list.iterator();
    usize mut index = 0;
    while !it->ended {
      let left = it->next();
      let right = copy->at(index);
      if 0 != left && 0 != right {
        static_attest(safe(left));
        static_attest(safe(right));
        assert(0 == strcmp(left->value, right->value));
        index++;
      }
    }

    assert(index == list.length);
    assert(index == copy->length);
  }

  list.destroy();
  copy->destroy();
}
